{"mappings":"AGAO,SAAS,IACZ,OAAO,MAAM,gCACV,IAAI,CAAC,AAAA,IACJ,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,6BAElB,OAAO,EAAS,IAAI,EACtB,EACJ,CCRK,SAAS,EAAa,CAAM,CAAE,CAAS,EAC1C,EAAU,SAAS,CAAG,GACtB,EAAO,OAAO,CAAC,AAAA,IACb,IAAM,EAAK,SAAS,aAAa,CAAC,KAClC,CAAA,EAAG,SAAS,CAAG;AACT,YAAA,EAAE,EAAM,EAAE,CAAC;AACX,YAAA,EAAE,EAAM,KAAK,CAAC;AACd,YAAA,EAAE,EAAM,KAAK,CAAC;AACd,YAAA,EAAE,EAAM,QAAQ,CAAC;AACjB,YAAA,EAAE,EAAM,IAAI,CAAC;A;AAEoB,6CAAA,EAAE,EAAM,EAAE,CAAC;AAAyB,2CACtC,EAAE,EAAM,EAAE,CAAC;AAA8B,6CACvC,EAAE,EAAM,EAAE,CAAC;AAA6B;AACxE,MACP,CAAC,CACD,EAAU,WAAW,CAAC,EACxB,EACF,EHZF,AAAA,WCFE,IAAM,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAkB,SAAS,aAAa,CAAC,sBAE/C,EAAa,gBAAgB,CAAC,QAAS,KACrC,AAAA,IACG,IAAI,CAAC,AAAA,GAAU,AAAA,EAAa,EAAQ,IACpC,KAAK,CAAC,AAAA,GAAS,QAAQ,KAAK,CAAC,GAClC,EACF,IDLA,AAAA,WIFE,IAAM,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAkB,SAAS,aAAa,CAAC,sBAE/C,EAAa,gBAAgB,CAAC,SAAU,AAAC,IACvC,EAAE,cAAc,GAChB,IAAM,EAAW,IAAI,SAAS,GAQ9B,ACjBO,MAAM,+BAAgC,CAC3C,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CDKL,CACf,MAAO,EAAS,GAAG,CAAC,SACpB,MAAO,EAAS,GAAG,CAAC,SACpB,SAAU,EAAS,GAAG,CAAC,YACvB,KAAM,OAAO,EAAS,GAAG,CAAC,QAC5B,ECTA,GACC,IAAI,CAAC,AAAA,IACJ,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,4BAElB,OAAO,EAAS,IAAI,EACtB,GDMG,IAAI,CAAC,IAAM,AAAA,KACX,IAAI,CAAC,AAAA,GAAU,AAAA,EAAa,EAAQ,IACpC,KAAK,CAAC,AAAA,GAAS,QAAQ,KAAK,CAAC,GAClC,EACF,IJfA,AAAA,WMHE,IAAM,EAAkB,SAAS,aAAa,CAAC,sBAE/C,EAAgB,gBAAgB,CAAC,QAAS,AAAC,IACzC,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAc,CAC5C,IAAM,EAAU,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,CAC7B,EAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAS7B,AClBK,MAAM,CAAC,6BAA6B,EDkB7B,EClB+B,CAAI,CAAE,CACjD,OAAQ,MACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CDMC,CACnB,MAAO,OAAO,eAAgB,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,GAAK,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CACzF,MAAO,OAAO,eAAgB,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,GAAK,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CACzF,SAAU,OAAO,kBAAmB,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,GAAK,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CAC/F,KAAM,OAAO,OAAO,cAAe,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,IAAM,OAAO,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CACxG,ECVF,GACC,IAAI,CAAC,AAAA,IACJ,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,qBAElB,OAAO,EAAS,IAAI,EACtB,GDOK,IAAI,CAAC,IAAM,AAAA,KACX,IAAI,CAAC,AAAA,GAAU,AAAA,EAAa,EAAQ,IACpC,KAAK,CAAC,AAAA,GAAS,QAAQ,KAAK,CAAC,GAClC,CACF,EACF,INhBA,AAAA,WQJE,IAAM,EAAkB,SAAS,aAAa,CAAC,sBACzC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAgB,SAAS,cAAc,CAAC,iBACxC,EAAgB,SAAS,cAAc,CAAC,cAE9C,EAAgB,gBAAgB,CAAC,QAAS,AAAC,IACzC,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAY,CAC1C,IAAM,EAAU,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,CAC7B,EAAM,EAAE,MAAM,CAAC,OAAO,CAAC,KAE7B,CAAA,EAAc,QAAQ,CAAC,EAAK,CAAC,KAAK,CAAG,EACrC,EAAc,QAAQ,CAAC,KAAQ,CAAC,KAAK,CAAG,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CACnE,EAAc,QAAQ,CAAC,KAAQ,CAAC,KAAK,CAAG,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CACnE,EAAc,QAAQ,CAAC,QAAW,CAAC,KAAK,CAAG,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CACtE,EAAc,QAAQ,CAAC,IAAO,CAAC,KAAK,CAAG,EAAI,QAAQ,CAAC,EAAE,CAAC,WAAW,CAElE,EAAU,KAAK,CAAC,OAAO,CAAG,OAC5B,CACF,GAEA,EAAc,gBAAgB,CAAC,SAAU,AAAC,IACxC,EAAE,cAAc,GAChB,IAAM,EAAW,IAAI,SAAS,GACxB,EAAK,EAAS,GAAG,CAAC,MAQxB,ACnCO,MAAM,CAAC,6BAA6B,EDmChC,ECnCkC,CAAI,CAAE,CACjD,OAAQ,QACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CDuBD,CACnB,MAAO,EAAS,GAAG,CAAC,SACpB,MAAO,EAAS,GAAG,CAAC,SACpB,SAAU,EAAS,GAAG,CAAC,YACvB,KAAM,OAAO,EAAS,GAAG,CAAC,QAC5B,EC3BA,GACC,IAAI,CAAC,AAAA,IACJ,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,wCAElB,OAAO,EAAS,IAAI,EACtB,GDwBG,IAAI,CAAC,IAAM,AAAA,KACX,IAAI,CAAC,AAAA,GAAU,AAAA,EAAa,EAAQ,IACpC,KAAK,CAAC,AAAA,GAAS,QAAQ,KAAK,CAAC,IAEhC,EAAU,KAAK,CAAC,OAAO,CAAG,MAC5B,GAEA,EAAc,gBAAgB,CAAC,QAAS,KACtC,EAAU,KAAK,CAAC,OAAO,CAAG,MAC5B,EACF,IRrCA,AAAA,WULE,IAAM,EAAkB,SAAS,aAAa,CAAC,sBAE/C,EAAgB,gBAAgB,CAAC,QAAS,AAAC,IACzC,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAc,CAC5C,IAAM,EAAU,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,CAC/B,QAAQ,oBACV,ACVG,MAAM,CAAC,6BAA6B,EDU3B,ECV6B,CAAI,CAAE,CACjD,OAAQ,QACV,GACC,IAAI,CAAC,AAAA,IACJ,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,4BAElB,OAAO,EAAS,IAAI,EACtB,GDGO,IAAI,CAAC,IAAM,AAAA,KACX,IAAI,CAAC,AAAA,GAAU,AAAA,EAAa,EAAQ,IACpC,KAAK,CAAC,AAAA,GAAS,QAAQ,KAAK,CAAC,GAEpC,CACF,EACF","sources":["<anon>","src/index.js","src/actions/getMoviesAction.js","src/api/getMovies.js","src/actions/renderMovies.js","src/actions/addMovieAction.js","src/api/addMovie.js","src/actions/updateMovieAction.js","src/api/updateMovie.js","src/actions/patchMovieAction.js","src/api/patchMovie.js","src/actions/deleteMovieAction.js","src/api/deleteMovie.js"],"sourcesContent":["function $f1fdfc763c519c8a$export$60e1c8f5f122c5ac() {\n    return fetch('http://localhost:3000/movies').then((response)=>{\n        if (!response.ok) throw new Error(\"\\u043F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u044F \\u0444\\u0456\\u043B\\u044C\\u043C\\u0456\\u0432\");\n        return response.json();\n    });\n}\n\n\nfunction $3b65f883dd68820b$export$1a30573fde3dfc62(movies, tableBody) {\n    tableBody.innerHTML = '';\n    movies.forEach((movie)=>{\n        const tr = document.createElement('tr');\n        tr.innerHTML = `\n        <td>${movie.id}</td>\n        <td>${movie.title}</td>\n        <td>${movie.genre}</td>\n        <td>${movie.director}</td>\n        <td>${movie.year}</td>\n        <td>\n          <button class=\"updateBtn\" data-id=\"${movie.id}\">\\u{41E}\\u{43D}\\u{43E}\\u{432}\\u{438}\\u{442}\\u{438} (PUT)</button>\n          <button class=\"editBtn\" data-id=\"${movie.id}\">\\u{420}\\u{435}\\u{434}\\u{430}\\u{433}\\u{443}\\u{432}\\u{430}\\u{442}\\u{438} (PATCH)</button>\n          <button class=\"deleteBtn\" data-id=\"${movie.id}\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438} (DELETE)</button>\n        </td>\n      `;\n        tableBody.appendChild(tr);\n    });\n}\n\n\nfunction $71dc5f3a9406accf$export$236c120d25947172() {\n    const getMoviesBtn = document.getElementById('getMoviesBtn');\n    const moviesTableBody = document.querySelector('#moviesTable tbody');\n    getMoviesBtn.addEventListener('click', ()=>{\n        (0, $f1fdfc763c519c8a$export$60e1c8f5f122c5ac)().then((movies)=>(0, $3b65f883dd68820b$export$1a30573fde3dfc62)(movies, moviesTableBody)).catch((error)=>console.error(error));\n    });\n}\n\n\nfunction $977e4bdafb9b4fdf$export$2067da3b023cb800(movie) {\n    return fetch('http://localhost:3000/movies', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(movie)\n    }).then((response)=>{\n        if (!response.ok) throw new Error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0444\\u0438\\u043B\\u044C\\u043C\\u0430\");\n        return response.json();\n    });\n}\n\n\n\n\nfunction $42d3fd2aaf2fea49$export$289fcd62356f5767() {\n    const addMovieForm = document.getElementById('addMovieForm');\n    const moviesTableBody = document.querySelector('#moviesTable tbody');\n    addMovieForm.addEventListener('submit', (e)=>{\n        e.preventDefault();\n        const formData = new FormData(addMovieForm);\n        const newMovie = {\n            title: formData.get('title'),\n            genre: formData.get('genre'),\n            director: formData.get('director'),\n            year: Number(formData.get('year'))\n        };\n        (0, $977e4bdafb9b4fdf$export$2067da3b023cb800)(newMovie).then(()=>(0, $f1fdfc763c519c8a$export$60e1c8f5f122c5ac)()).then((movies)=>(0, $3b65f883dd68820b$export$1a30573fde3dfc62)(movies, moviesTableBody)).catch((error)=>console.error(error));\n    });\n}\n\n\nfunction $896fc4d361bf5e4f$export$ab6ea2447c48345(id, movie) {\n    return fetch(`http://localhost:3000/movies/${id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(movie)\n    }).then((response)=>{\n        if (!response.ok) throw new Error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043E\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044F\");\n        return response.json();\n    });\n}\n\n\n\n\nfunction $d625bd77028933cc$export$d68adcf1049b7b4e() {\n    const moviesTableBody = document.querySelector('#moviesTable tbody');\n    moviesTableBody.addEventListener('click', (e)=>{\n        if (e.target.classList.contains('updateBtn')) {\n            const movieId = e.target.dataset.id;\n            const row = e.target.closest('tr');\n            const updatedMovie = {\n                title: prompt(\"\\u041D\\u043E\\u0432\\u0438\\u0439 Title:\", row.children[1].textContent) || row.children[1].textContent,\n                genre: prompt(\"\\u041D\\u043E\\u0432\\u0438\\u0439 Genre:\", row.children[2].textContent) || row.children[2].textContent,\n                director: prompt(\"\\u041D\\u043E\\u0432\\u0438\\u0439 Director:\", row.children[3].textContent) || row.children[3].textContent,\n                year: Number(prompt(\"\\u041D\\u043E\\u0432\\u0438\\u0439 Year:\", row.children[4].textContent)) || Number(row.children[4].textContent)\n            };\n            (0, $896fc4d361bf5e4f$export$ab6ea2447c48345)(movieId, updatedMovie).then(()=>(0, $f1fdfc763c519c8a$export$60e1c8f5f122c5ac)()).then((movies)=>(0, $3b65f883dd68820b$export$1a30573fde3dfc62)(movies, moviesTableBody)).catch((error)=>console.error(error));\n        }\n    });\n}\n\n\nfunction $9780ec5fb7c9b4c7$export$f2d4f41e6a5ab37c(id, partialMovie) {\n    return fetch(`http://localhost:3000/movies/${id}`, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(partialMovie)\n    }).then((response)=>{\n        if (!response.ok) throw new Error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u0447\\u0430\\u0441\\u0442\\u043A\\u043E\\u0432\\u043E\\u0433\\u043E \\u043E\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044F \\u0444\\u0456\\u043B\\u044C\\u043C\\u0456\\u0432\");\n        return response.json();\n    });\n}\n\n\n\n\nfunction $2e875056ba347e29$export$33e174ac80b7c630() {\n    const moviesTableBody = document.querySelector('#moviesTable tbody');\n    const editModal = document.getElementById('editModal');\n    const editMovieForm = document.getElementById('editMovieForm');\n    const closeModalBtn = document.getElementById('closeModal');\n    moviesTableBody.addEventListener('click', (e)=>{\n        if (e.target.classList.contains('editBtn')) {\n            const movieId = e.target.dataset.id;\n            const row = e.target.closest('tr');\n            editMovieForm.elements['id'].value = movieId;\n            editMovieForm.elements['title'].value = row.children[1].textContent;\n            editMovieForm.elements['genre'].value = row.children[2].textContent;\n            editMovieForm.elements['director'].value = row.children[3].textContent;\n            editMovieForm.elements['year'].value = row.children[4].textContent;\n            editModal.style.display = 'block';\n        }\n    });\n    editMovieForm.addEventListener('submit', (e)=>{\n        e.preventDefault();\n        const formData = new FormData(editMovieForm);\n        const id = formData.get('id');\n        const partialMovie = {\n            title: formData.get('title'),\n            genre: formData.get('genre'),\n            director: formData.get('director'),\n            year: Number(formData.get('year'))\n        };\n        (0, $9780ec5fb7c9b4c7$export$f2d4f41e6a5ab37c)(id, partialMovie).then(()=>(0, $f1fdfc763c519c8a$export$60e1c8f5f122c5ac)()).then((movies)=>(0, $3b65f883dd68820b$export$1a30573fde3dfc62)(movies, moviesTableBody)).catch((error)=>console.error(error));\n        editModal.style.display = 'none';\n    });\n    closeModalBtn.addEventListener('click', ()=>{\n        editModal.style.display = 'none';\n    });\n}\n\n\nfunction $4ed540f2a5c7885b$export$730b1716cbcc3184(id) {\n    return fetch(`http://localhost:3000/movies/${id}`, {\n        method: 'DELETE'\n    }).then((response)=>{\n        if (!response.ok) throw new Error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u0432\\u0438\\u0434\\u0430\\u043B\\u0435\\u043D\\u043D\\u044F \\u0444\\u0456\\u043B\\u044C\\u043C\\u0443\");\n        return response.json();\n    });\n}\n\n\n\n\nfunction $32cf7950634c8e68$export$ee9c2ea72947fb88() {\n    const moviesTableBody = document.querySelector('#moviesTable tbody');\n    moviesTableBody.addEventListener('click', (e)=>{\n        if (e.target.classList.contains('deleteBtn')) {\n            const movieId = e.target.dataset.id;\n            if (confirm(\"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0444\\u0456\\u043B\\u044C\\u043C?\")) (0, $4ed540f2a5c7885b$export$730b1716cbcc3184)(movieId).then(()=>(0, $f1fdfc763c519c8a$export$60e1c8f5f122c5ac)()).then((movies)=>(0, $3b65f883dd68820b$export$1a30573fde3dfc62)(movies, moviesTableBody)).catch((error)=>console.error(error));\n        }\n    });\n}\n\n\n(0, $71dc5f3a9406accf$export$236c120d25947172)();\n(0, $42d3fd2aaf2fea49$export$289fcd62356f5767)();\n(0, $d625bd77028933cc$export$d68adcf1049b7b4e)();\n(0, $2e875056ba347e29$export$33e174ac80b7c630)();\n(0, $32cf7950634c8e68$export$ee9c2ea72947fb88)();\n\n\n//# sourceMappingURL=index.c101b15b.js.map\n","import { initGetMovies } from './actions/getMoviesAction.js';\r\nimport { initAddMovie } from './actions/addMovieAction.js';\r\nimport { initUpdateMovie } from './actions/updateMovieAction.js';\r\nimport { initPatchMovie } from './actions/patchMovieAction.js';\r\nimport { initDeleteMovie } from './actions/deleteMovieAction.js';\r\n\r\ninitGetMovies();\r\ninitAddMovie();\r\ninitUpdateMovie();\r\ninitPatchMovie();\r\ninitDeleteMovie();","import { getMovies } from '../api/getMovies.js';\r\nimport { renderMovies } from './renderMovies.js';\r\n\r\nexport function initGetMovies() {\r\n  const getMoviesBtn = document.getElementById('getMoviesBtn');\r\n  const moviesTableBody = document.querySelector('#moviesTable tbody');\r\n\r\n  getMoviesBtn.addEventListener('click', () => {\r\n    getMovies()\r\n      .then(movies => renderMovies(movies, moviesTableBody))\r\n      .catch(error => console.error(error));\r\n  });\r\n}","export function getMovies() {\r\n    return fetch('http://localhost:3000/movies')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('помилка отримання фільмів');\r\n        }\r\n        return response.json();\r\n      });\r\n  }","export function renderMovies(movies, tableBody) {\r\n    tableBody.innerHTML = '';\r\n    movies.forEach(movie => {\r\n      const tr = document.createElement('tr');\r\n      tr.innerHTML = `\r\n        <td>${movie.id}</td>\r\n        <td>${movie.title}</td>\r\n        <td>${movie.genre}</td>\r\n        <td>${movie.director}</td>\r\n        <td>${movie.year}</td>\r\n        <td>\r\n          <button class=\"updateBtn\" data-id=\"${movie.id}\">Оновити (PUT)</button>\r\n          <button class=\"editBtn\" data-id=\"${movie.id}\">Редагувати (PATCH)</button>\r\n          <button class=\"deleteBtn\" data-id=\"${movie.id}\">Видалити (DELETE)</button>\r\n        </td>\r\n      `;\r\n      tableBody.appendChild(tr);\r\n    });\r\n  }","import { addMovie } from '../api/addMovie.js';\r\nimport { getMovies } from '../api/getMovies.js';\r\nimport { renderMovies } from './renderMovies.js';\r\n\r\nexport function initAddMovie() {\r\n  const addMovieForm = document.getElementById('addMovieForm');\r\n  const moviesTableBody = document.querySelector('#moviesTable tbody');\r\n\r\n  addMovieForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(addMovieForm);\r\n    const newMovie = {\r\n      title: formData.get('title'),\r\n      genre: formData.get('genre'),\r\n      director: formData.get('director'),\r\n      year: Number(formData.get('year'))\r\n    };\r\n\r\n    addMovie(newMovie)\r\n      .then(() => getMovies())\r\n      .then(movies => renderMovies(movies, moviesTableBody))\r\n      .catch(error => console.error(error));\r\n  });\r\n}","export function addMovie(movie) {\r\n    return fetch('http://localhost:3000/movies', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(movie)\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка добавления фильма');\r\n      }\r\n      return response.json();\r\n    });\r\n  }","import { updateMovie } from '../api/updateMovie.js';\r\nimport { getMovies } from '../api/getMovies.js';\r\nimport { renderMovies } from './renderMovies.js';\r\n\r\nexport function initUpdateMovie() {\r\n  const moviesTableBody = document.querySelector('#moviesTable tbody');\r\n\r\n  moviesTableBody.addEventListener('click', (e) => {\r\n    if (e.target.classList.contains('updateBtn')) {\r\n      const movieId = e.target.dataset.id;\r\n      const row = e.target.closest('tr');\r\n\r\n      const updatedMovie = {\r\n        title: prompt(\"Новий Title:\", row.children[1].textContent) || row.children[1].textContent,\r\n        genre: prompt(\"Новий Genre:\", row.children[2].textContent) || row.children[2].textContent,\r\n        director: prompt(\"Новий Director:\", row.children[3].textContent) || row.children[3].textContent,\r\n        year: Number(prompt(\"Новий Year:\", row.children[4].textContent)) || Number(row.children[4].textContent)\r\n      };\r\n\r\n      updateMovie(movieId, updatedMovie)\r\n        .then(() => getMovies())\r\n        .then(movies => renderMovies(movies, moviesTableBody))\r\n        .catch(error => console.error(error));\r\n    }\r\n  });\r\n}","export function updateMovie(id, movie) {\r\n    return fetch(`http://localhost:3000/movies/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(movie)\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Помилка оновлення');\r\n      }\r\n      return response.json();\r\n    });\r\n  }","import { patchMovie } from '../api/patchMovie.js';\r\nimport { getMovies } from '../api/getMovies.js';\r\nimport { renderMovies } from './renderMovies.js';\r\n\r\nexport function initPatchMovie() {\r\n  const moviesTableBody = document.querySelector('#moviesTable tbody');\r\n  const editModal = document.getElementById('editModal');\r\n  const editMovieForm = document.getElementById('editMovieForm');\r\n  const closeModalBtn = document.getElementById('closeModal');\r\n\r\n  moviesTableBody.addEventListener('click', (e) => {\r\n    if (e.target.classList.contains('editBtn')) {\r\n      const movieId = e.target.dataset.id;\r\n      const row = e.target.closest('tr');\r\n\r\n      editMovieForm.elements['id'].value = movieId;\r\n      editMovieForm.elements['title'].value = row.children[1].textContent;\r\n      editMovieForm.elements['genre'].value = row.children[2].textContent;\r\n      editMovieForm.elements['director'].value = row.children[3].textContent;\r\n      editMovieForm.elements['year'].value = row.children[4].textContent;\r\n\r\n      editModal.style.display = 'block';\r\n    }\r\n  });\r\n\r\n  editMovieForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(editMovieForm);\r\n    const id = formData.get('id');\r\n    const partialMovie = {\r\n      title: formData.get('title'),\r\n      genre: formData.get('genre'),\r\n      director: formData.get('director'),\r\n      year: Number(formData.get('year'))\r\n    };\r\n\r\n    patchMovie(id, partialMovie)\r\n      .then(() => getMovies())\r\n      .then(movies => renderMovies(movies, moviesTableBody))\r\n      .catch(error => console.error(error));\r\n\r\n    editModal.style.display = 'none';\r\n  });\r\n\r\n  closeModalBtn.addEventListener('click', () => {\r\n    editModal.style.display = 'none';\r\n  });\r\n}","export function patchMovie(id, partialMovie) {\r\n    return fetch(`http://localhost:3000/movies/${id}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(partialMovie)\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Помилка часткового оновлення фільмів');\r\n      }\r\n      return response.json();\r\n    });\r\n  }","import { deleteMovie } from '../api/deleteMovie.js';\r\nimport { getMovies } from '../api/getMovies.js';\r\nimport { renderMovies } from './renderMovies.js';\r\n\r\nexport function initDeleteMovie() {\r\n  const moviesTableBody = document.querySelector('#moviesTable tbody');\r\n\r\n  moviesTableBody.addEventListener('click', (e) => {\r\n    if (e.target.classList.contains('deleteBtn')) {\r\n      const movieId = e.target.dataset.id;\r\n      if (confirm(\"Видалити фільм?\")) {\r\n        deleteMovie(movieId)\r\n          .then(() => getMovies())\r\n          .then(movies => renderMovies(movies, moviesTableBody))\r\n          .catch(error => console.error(error));\r\n      }\r\n    }\r\n  });\r\n}\r\n","export function deleteMovie(id) {\r\n    return fetch(`http://localhost:3000/movies/${id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Помилка видалення фільму');\r\n      }\r\n      return response.json();\r\n    });\r\n  }"],"names":["$f1fdfc763c519c8a$export$60e1c8f5f122c5ac","fetch","then","response","ok","Error","json","$3b65f883dd68820b$export$1a30573fde3dfc62","movies","tableBody","innerHTML","forEach","movie","tr","document","createElement","id","title","genre","director","year","appendChild","getMoviesBtn","getElementById","moviesTableBody","querySelector","addEventListener","catch","error","console","addMovieForm","e","preventDefault","formData","FormData","method","headers","body","JSON","stringify","get","Number","target","classList","contains","movieId","dataset","row","closest","prompt","children","textContent","editModal","editMovieForm","closeModalBtn","elements","value","style","display","confirm"],"version":3,"file":"index.c101b15b.js.map"}